AWSTemplateFormatVersion: '2010-09-09'
Description: 'Systems Manager Parameter Store Hierarchical Organization for Configuration Management'

Parameters:
  ApplicationName:
    Type: String
    Description: Name of the application
    Default: 'myapp'
    
  Environment:
    Type: String
    Description: Environment name
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
    
  Region:
    Type: String
    Description: AWS Region for regional parameters
    Default: !Ref 'AWS::Region'
    
  KMSKeyId:
    Type: String
    Description: KMS Key ID for SecureString parameters (optional)
    Default: 'alias/aws/ssm'

Resources:
  # KMS Key for Parameter Store Encryption
  ParameterStoreKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for Parameter Store SecureString encryption
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow Systems Manager
            Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: '*'

  ParameterStoreKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${ApplicationName}-parameter-store-key'
      TargetKeyId: !Ref ParameterStoreKMSKey

  # Application Configuration Parameters
  # Database Configuration
  DatabaseHost:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/database/host'
      Type: String
      Value: !Sub '${Environment}-database.${AWS::Region}.rds.amazonaws.com'
      Description: Database host endpoint
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: Database

  DatabasePort:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/database/port'
      Type: String
      Value: '5432'
      Description: Database port number
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: Database

  DatabaseName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/database/name'
      Type: String
      Value: !Sub '${ApplicationName}_${Environment}'
      Description: Database name
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: Database

  DatabaseConnectionPoolSize:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/database/pool_size'
      Type: String
      Value: !If [IsProd, '20', '10']
      Description: Database connection pool size
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: Database

  DatabaseTimeout:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/database/timeout'
      Type: String
      Value: '30'
      Description: Database connection timeout in seconds
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: Database

  # API Configuration
  APIBaseURL:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/api/base_url'
      Type: String
      Value: !Sub 'https://api-${Environment}.example.com'
      Description: Base URL for external API
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: API

  APITimeout:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/api/timeout'
      Type: String
      Value: !If [IsProd, '60', '30']
      Description: API request timeout in seconds
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: API

  APIRetryCount:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/api/retry_count'
      Type: String
      Value: '3'
      Description: Number of API request retries
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: API

  APIRateLimit:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/api/rate_limit'
      Type: String
      Value: !If [IsProd, '1000', '100']
      Description: API rate limit per minute
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: API

  # Cache Configuration
  CacheHost:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/cache/host'
      Type: String
      Value: !Sub '${Environment}-cache.${AWS::Region}.cache.amazonaws.com'
      Description: Cache host endpoint
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: Cache

  CachePort:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/cache/port'
      Type: String
      Value: '6379'
      Description: Cache port number
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: Cache

  CacheTTL:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/cache/ttl'
      Type: String
      Value: !If [IsProd, '3600', '1800']
      Description: Cache TTL in seconds
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: Cache

  # Logging Configuration
  LogLevel:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/logging/level'
      Type: String
      Value: !If [IsProd, 'INFO', 'DEBUG']
      Description: Application log level
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: Logging

  LogRetentionDays:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/logging/retention_days'
      Type: String
      Value: !If [IsProd, '30', '7']
      Description: Log retention period in days
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: Logging

  # Feature Flags
  FeatureNewUI:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/features/new_ui'
      Type: String
      Value: !If [IsProd, 'false', 'true']
      Description: Enable new UI feature
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: FeatureFlags

  FeatureAdvancedAnalytics:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/features/advanced_analytics'
      Type: String
      Value: !If [IsProd, 'true', 'false']
      Description: Enable advanced analytics feature
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: FeatureFlags

  FeatureBetaFeatures:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/features/beta_features'
      Type: String
      Value: !If [IsProd, 'false', 'true']
      Description: Enable beta features
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: FeatureFlags

  # Secure Parameters (Encrypted)
  DatabasePassword:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/database/password'
      Type: SecureString
      Value: !Sub '${Environment}-db-password-change-me'
      KeyId: !Ref ParameterStoreKMSKey
      Description: Database password (encrypted)
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: Database
        Sensitive: 'true'

  APIKey:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/api/key'
      Type: SecureString
      Value: !Sub '${Environment}-api-key-12345-change-me'
      KeyId: !Ref ParameterStoreKMSKey
      Description: External API key (encrypted)
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: API
        Sensitive: 'true'

  JWTSecret:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/jwt/secret'
      Type: SecureString
      Value: 'jwt-secret-key-change-me-in-production'
      KeyId: !Ref ParameterStoreKMSKey
      Description: JWT signing secret (encrypted)
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: Security
        Sensitive: 'true'

  EncryptionKey:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/encryption/key'
      Type: SecureString
      Value: 'encryption-key-change-me-32-chars'
      KeyId: !Ref ParameterStoreKMSKey
      Description: Application encryption key (encrypted)
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: Security
        Sensitive: 'true'

  # Third-party Service Configuration
  ThirdPartyServiceURL:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/thirdparty/service_url'
      Type: String
      Value: 'https://api.thirdparty.com/v1'
      Description: Third-party service URL
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: ThirdParty

  ThirdPartyAPIKey:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/thirdparty/api_key'
      Type: SecureString
      Value: 'third-party-api-key-change-me'
      KeyId: !Ref ParameterStoreKMSKey
      Description: Third-party service API key (encrypted)
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: ThirdParty
        Sensitive: 'true'

  # Monitoring Configuration
  MetricsEnabled:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/monitoring/metrics_enabled'
      Type: String
      Value: 'true'
      Description: Enable metrics collection
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: Monitoring

  MetricsInterval:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/monitoring/metrics_interval'
      Type: String
      Value: '60'
      Description: Metrics collection interval in seconds
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: Monitoring

  AlertingEnabled:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/monitoring/alerting_enabled'
      Type: String
      Value: !If [IsProd, 'true', 'false']
      Description: Enable alerting
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: Monitoring

  # Regional Configuration
  RegionalEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/regional/endpoint'
      Type: String
      Value: !Sub 'https://${Environment}-${AWS::Region}.example.com'
      Description: Regional service endpoint
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: Regional

  RegionalBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ApplicationName}/${Environment}/regional/s3_bucket'
      Type: String
      Value: !Sub '${ApplicationName}-${Environment}-${AWS::Region}-bucket'
      Description: Regional S3 bucket name
      Tags:
        Application: !Ref ApplicationName
        Environment: !Ref Environment
        Category: Regional

  # IAM Role for Parameter Access
  ParameterAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ApplicationName}-parameter-access-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ecs-tasks.amazonaws.com
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ParameterStoreAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ApplicationName}/${Environment}/*'
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                Resource: !GetAtt ParameterStoreKMSKey.Arn
              - Effect: Allow
                Action:
                  - ssm:DescribeParameters
                Resource: '*'

  # Instance Profile for EC2
  ParameterAccessInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${ApplicationName}-parameter-access-profile'
      Roles:
        - !Ref ParameterAccessRole

Conditions:
  IsProd: !Equals [!Ref Environment, 'prod']

Outputs:
  ParameterStoreKMSKeyId:
    Description: KMS Key ID for Parameter Store encryption
    Value: !Ref ParameterStoreKMSKey
    Export:
      Name: !Sub '${AWS::StackName}-ParameterStoreKMSKeyId'

  ParameterStoreKMSKeyArn:
    Description: KMS Key ARN for Parameter Store encryption
    Value: !GetAtt ParameterStoreKMSKey.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ParameterStoreKMSKeyArn'

  ParameterAccessRoleArn:
    Description: IAM Role ARN for parameter access
    Value: !GetAtt ParameterAccessRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ParameterAccessRoleArn'

  ParameterAccessInstanceProfileArn:
    Description: Instance Profile ARN for parameter access
    Value: !GetAtt ParameterAccessInstanceProfile.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ParameterAccessInstanceProfileArn'

  ParameterHierarchy:
    Description: Parameter Store hierarchy structure
    Value: !Sub |
      Parameter Store Hierarchy:
      /${ApplicationName}/${Environment}/
      ├── database/
      │   ├── host
      │   ├── port
      │   ├── name
      │   ├── pool_size
      │   ├── timeout
      │   └── password (SecureString)
      ├── api/
      │   ├── base_url
      │   ├── timeout
      │   ├── retry_count
      │   ├── rate_limit
      │   └── key (SecureString)
      ├── cache/
      │   ├── host
      │   ├── port
      │   └── ttl
      ├── logging/
      │   ├── level
      │   └── retention_days
      ├── features/
      │   ├── new_ui
      │   ├── advanced_analytics
      │   └── beta_features
      ├── jwt/
      │   └── secret (SecureString)
      ├── encryption/
      │   └── key (SecureString)
      ├── thirdparty/
      │   ├── service_url
      │   └── api_key (SecureString)
      ├── monitoring/
      │   ├── metrics_enabled
      │   ├── metrics_interval
      │   └── alerting_enabled
      └── regional/
          ├── endpoint
          └── s3_bucket

  ParameterRetrievalCommands:
    Description: Commands to retrieve parameters
    Value: !Sub |
      # Get all parameters for the application:
      aws ssm get-parameters-by-path --path "/${ApplicationName}/${Environment}" --recursive --with-decryption

      # Get specific parameter:
      aws ssm get-parameter --name "/${ApplicationName}/${Environment}/database/host"

      # Get secure parameter (decrypted):
      aws ssm get-parameter --name "/${ApplicationName}/${Environment}/database/password" --with-decryption

      # Get parameters by category (using tags):
      aws ssm describe-parameters --parameter-filters "Key=tag:Category,Values=Database"

  ParameterUpdateCommands:
    Description: Commands to update parameters
    Value: !Sub |
      # Update a standard parameter:
      aws ssm put-parameter --name "/${ApplicationName}/${Environment}/api/timeout" --value "45" --overwrite

      # Update a secure parameter:
      aws ssm put-parameter --name "/${ApplicationName}/${Environment}/database/password" --value "new-password" --type "SecureString" --key-id "${ParameterStoreKMSKey}" --overwrite

      # Add tags to a parameter:
      aws ssm add-tags-to-resource --resource-type "Parameter" --resource-id "/${ApplicationName}/${Environment}/database/host" --tags "Key=Owner,Value=DevOps"

  BestPractices:
    Description: Parameter Store best practices implemented
    Value: |
      ✓ Hierarchical organization by application and environment
      ✓ Consistent naming convention
      ✓ Appropriate use of SecureString for sensitive data
      ✓ Custom KMS key for encryption
      ✓ Proper IAM roles and policies
      ✓ Resource tagging for organization and cost tracking
      ✓ Environment-specific configuration values
      ✓ Separation of concerns (database, API, cache, etc.)
      ✓ Feature flags for deployment control
      ✓ Regional configuration support