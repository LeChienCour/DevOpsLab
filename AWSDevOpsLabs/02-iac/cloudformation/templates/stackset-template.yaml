AWSTemplateFormatVersion: '2010-09-09'
Description: 'StackSet Template for Multi-Account/Multi-Region Deployment'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name for resource tagging
  
  BucketPrefix:
    Type: String
    Default: devops-lab
    Description: Prefix for S3 bucket names
  
  EnableLogging:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable CloudTrail logging

Conditions:
  CreateLogging: !Equals [!Ref EnableLogging, 'true']

Resources:
  # S3 Bucket for application artifacts
  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${BucketPrefix}-artifacts-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      Tags:
        - Key: Name
          Value: !Sub '${BucketPrefix}-artifacts'
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: StackSet

  # CloudTrail for auditing (conditional)
  CloudTrail:
    Type: AWS::CloudTrail::Trail
    Condition: CreateLogging
    Properties:
      TrailName: !Sub '${Environment}-cloudtrail-${AWS::Region}'
      S3BucketName: !Ref LoggingBucket
      S3KeyPrefix: !Sub 'cloudtrail-logs/${AWS::AccountId}/'
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: false
      EnableLogFileValidation: true
      EventSelectors:
        - ReadWriteType: All
          IncludeManagementEvents: true
          DataResources:
            - Type: AWS::S3::Object
              Values:
                - !Sub '${ArtifactsBucket}/*'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-cloudtrail'
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket for CloudTrail logs (conditional)
  LoggingBucket:
    Type: AWS::S3::Bucket
    Condition: CreateLogging
    Properties:
      BucketName: !Sub '${BucketPrefix}-logs-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: 90
      Tags:
        - Key: Name
          Value: !Sub '${BucketPrefix}-logs'
        - Key: Environment
          Value: !Ref Environment

  # CloudTrail Bucket Policy (conditional)
  LoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: CreateLogging
    Properties:
      Bucket: !Ref LoggingBucket
      PolicyDocument:
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt LoggingBucket.Arn
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub '${LoggingBucket.Arn}/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control

  # IAM Role for cross-account access
  CrossAccountRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-cross-account-role-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'sts:ExternalId': !Sub '${Environment}-external-id'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub '${ArtifactsBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !GetAtt ArtifactsBucket.Arn
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-cross-account-role'
        - Key: Environment
          Value: !Ref Environment

  # SNS Topic for notifications
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${Environment}-notifications-${AWS::Region}'
      DisplayName: !Sub '${Environment} Environment Notifications'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-notifications'
        - Key: Environment
          Value: !Ref Environment

Outputs:
  ArtifactsBucketName:
    Description: S3 Bucket for artifacts
    Value: !Ref ArtifactsBucket
    Export:
      Name: !Sub '${AWS::StackName}-ArtifactsBucket'

  ArtifactsBucketArn:
    Description: S3 Bucket ARN for artifacts
    Value: !GetAtt ArtifactsBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ArtifactsBucketArn'

  CrossAccountRoleArn:
    Description: Cross-account role ARN
    Value: !GetAtt CrossAccountRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CrossAccountRoleArn'

  NotificationTopicArn:
    Description: SNS Topic ARN for notifications
    Value: !Ref NotificationTopic
    Export:
      Name: !Sub '${AWS::StackName}-NotificationTopicArn'

  LoggingBucketName:
    Condition: CreateLogging
    Description: S3 Bucket for CloudTrail logs
    Value: !Ref LoggingBucket
    Export:
      Name: !Sub '${AWS::StackName}-LoggingBucket'