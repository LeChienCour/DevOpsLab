AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Config Custom Rules with Lambda Functions'

Parameters:
  SNSTopicARN:
    Type: String
    Description: SNS Topic ARN for Config notifications
  
  ApprovedInstanceTypes:
    Type: String
    Default: "t2.micro,t3.micro,t3.small,t4g.micro,t4g.small"
    Description: Comma-separated list of approved EC2 instance types

Resources:
  # IAM Role for Lambda Functions
  LambdaConfigRuleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSConfigRulesExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaConfigRulePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListMFADevices
                  - s3:GetBucketPublicAccessBlock
                  - s3:GetBucketPolicyStatus
                  - s3:GetBucketAcl
                  - s3:GetBucketPolicy
                  - ec2:DescribeInstances
                Resource: '*'

  # IAM User MFA Lambda Function
  IAMUserMFAFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: IAMUserMFAConfigRule
      Handler: iam_user_mfa.lambda_handler
      Role: !GetAtt LambdaConfigRuleRole.Arn
      Runtime: python3.9
      Timeout: 30
      Code:
        ZipFile: |
          '''
          Custom AWS Config rule to check if IAM users have MFA enabled
          '''

          import json
          import boto3
          import datetime

          def evaluate_compliance(configuration_item, rule_parameters):
              """
              Evaluates if IAM users have MFA enabled
              """
              if configuration_item['resourceType'] != 'AWS::IAM::User':
                  return 'NOT_APPLICABLE'
              
              # Get the IAM user name
              user_name = configuration_item['resourceName']
              
              # Check if the user is the root user (not applicable)
              if user_name == 'root':
                  return 'NOT_APPLICABLE'
              
              # Get the MFA devices for the user
              iam = boto3.client('iam')
              try:
                  response = iam.list_mfa_devices(UserName=user_name)
                  mfa_devices = response['MFADevices']
                  
                  # If no MFA devices, user is non-compliant
                  if not mfa_devices:
                      return 'NON_COMPLIANT'
                  
                  return 'COMPLIANT'
              except Exception as e:
                  # If there's an error, mark as non-compliant
                  return 'NON_COMPLIANT'

          def lambda_handler(event, context):
              """
              Lambda function handler for AWS Config custom rule
              """
              invoking_event = json.loads(event['invokingEvent'])
              rule_parameters = json.loads(event['ruleParameters']) if 'ruleParameters' in event else {}
              
              if 'configurationItem' not in invoking_event:
                  return {
                      'compliance_type': 'NOT_APPLICABLE',
                      'annotation': 'The event did not contain a configuration item.'
                  }
              
              configuration_item = invoking_event['configurationItem']
              
              # Check if the resource was deleted
              if configuration_item['configurationItemStatus'] == 'ResourceDeleted':
                  return {
                      'compliance_type': 'NOT_APPLICABLE',
                      'annotation': 'The resource was deleted.'
                  }
              
              # Evaluate compliance
              compliance_type = evaluate_compliance(configuration_item, rule_parameters)
              
              # Build the evaluation response
              annotation = "IAM user has MFA enabled" if compliance_type == 'COMPLIANT' else "IAM user does not have MFA enabled"
              
              evaluation = {
                  'compliance_type': compliance_type,
                  'annotation': annotation,
                  'ordering_timestamp': configuration_item['configurationItemCaptureTime']
              }
              
              put_evaluations_request = {
                  'Evaluations': [
                      {
                          'ComplianceResourceType': configuration_item['resourceType'],
                          'ComplianceResourceId': configuration_item['resourceId'],
                          'ComplianceType': compliance_type,
                          'Annotation': annotation,
                          'OrderingTimestamp': datetime.datetime.now().isoformat()
                      }
                  ],
                  'ResultToken': event['resultToken']
              }
              
              # Submit the evaluation results to AWS Config
              config = boto3.client('config')
              config.put_evaluations(**put_evaluations_request)
              
              return evaluation

  # S3 Public Access Lambda Function
  S3PublicAccessFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: S3PublicAccessConfigRule
      Handler: s3_public_access.lambda_handler
      Role: !GetAtt LambdaConfigRuleRole.Arn
      Runtime: python3.9
      Timeout: 30
      Code:
        ZipFile: |
          '''
          Custom AWS Config rule to check if S3 buckets have public access blocked
          '''

          import json
          import boto3
          import datetime

          def evaluate_compliance(configuration_item, rule_parameters):
              """
              Evaluates if S3 buckets have public access blocked
              """
              if configuration_item['resourceType'] != 'AWS::S3::Bucket':
                  return 'NOT_APPLICABLE'
              
              # Get the bucket name
              bucket_name = configuration_item['resourceName']
              
              # Check if the bucket has public access blocked
              s3control = boto3.client('s3control')
              s3 = boto3.client('s3')
              account_id = boto3.client('sts').get_caller_identity()['Account']
              
              try:
                  # Check bucket-level block public access settings
                  try:
                      public_access_block = s3.get_public_access_block(Bucket=bucket_name)
                      block_config = public_access_block['PublicAccessBlockConfiguration']
                      
                      # Check if all public access block settings are enabled
                      if not (block_config['BlockPublicAcls'] and 
                              block_config['IgnorePublicAcls'] and 
                              block_config['BlockPublicPolicy'] and 
                              block_config['RestrictPublicBuckets']):
                          return 'NON_COMPLIANT'
                  except s3.exceptions.NoSuchPublicAccessBlockConfiguration:
                      # If no public access block configuration exists, it's non-compliant
                      return 'NON_COMPLIANT'
                  
                  # Check bucket policy for public access
                  try:
                      bucket_policy = s3.get_bucket_policy(Bucket=bucket_name)
                      policy_json = json.loads(bucket_policy['Policy'])
                      
                      # Simple check for public access in policy (this is a basic check)
                      for statement in policy_json.get('Statement', []):
                          principal = statement.get('Principal', {})
                          if principal == '*' or principal.get('AWS') == '*':
                              if statement.get('Effect') == 'Allow':
                                  return 'NON_COMPLIANT'
                  except s3.exceptions.NoSuchBucketPolicy:
                      # No bucket policy is fine
                      pass
                  
                  # Check bucket ACLs
                  bucket_acl = s3.get_bucket_acl(Bucket=bucket_name)
                  for grant in bucket_acl['Grants']:
                      grantee = grant['Grantee']
                      if 'URI' in grantee and ('AllUsers' in grantee['URI'] or 'AuthenticatedUsers' in grantee['URI']):
                          return 'NON_COMPLIANT'
                  
                  return 'COMPLIANT'
              except Exception as e:
                  # If there's an error, mark as non-compliant
                  return 'NON_COMPLIANT'

          def lambda_handler(event, context):
              """
              Lambda function handler for AWS Config custom rule
              """
              invoking_event = json.loads(event['invokingEvent'])
              rule_parameters = json.loads(event['ruleParameters']) if 'ruleParameters' in event else {}
              
              if 'configurationItem' not in invoking_event:
                  return {
                      'compliance_type': 'NOT_APPLICABLE',
                      'annotation': 'The event did not contain a configuration item.'
                  }
              
              configuration_item = invoking_event['configurationItem']
              
              # Check if the resource was deleted
              if configuration_item['configurationItemStatus'] == 'ResourceDeleted':
                  return {
                      'compliance_type': 'NOT_APPLICABLE',
                      'annotation': 'The resource was deleted.'
                  }
              
              # Evaluate compliance
              compliance_type = evaluate_compliance(configuration_item, rule_parameters)
              
              # Build the evaluation response
              annotation = "S3 bucket has public access blocked" if compliance_type == 'COMPLIANT' else "S3 bucket has public access enabled"
              
              evaluation = {
                  'compliance_type': compliance_type,
                  'annotation': annotation,
                  'ordering_timestamp': configuration_item['configurationItemCaptureTime']
              }
              
              put_evaluations_request = {
                  'Evaluations': [
                      {
                          'ComplianceResourceType': configuration_item['resourceType'],
                          'ComplianceResourceId': configuration_item['resourceId'],
                          'ComplianceType': compliance_type,
                          'Annotation': annotation,
                          'OrderingTimestamp': datetime.datetime.now().isoformat()
                      }
                  ],
                  'ResultToken': event['resultToken']
              }
              
              # Submit the evaluation results to AWS Config
              config = boto3.client('config')
              config.put_evaluations(**put_evaluations_request)
              
              return evaluation

  # EC2 Instance Types Lambda Function
  EC2InstanceTypesFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: EC2InstanceTypesConfigRule
      Handler: ec2_instance_types.lambda_handler
      Role: !GetAtt LambdaConfigRuleRole.Arn
      Runtime: python3.9
      Timeout: 30
      Code:
        ZipFile: |
          '''
          Custom AWS Config rule to check if EC2 instances are using approved instance types
          '''

          import json
          import boto3
          import datetime

          def evaluate_compliance(configuration_item, rule_parameters):
              """
              Evaluates if EC2 instances are using approved instance types
              """
              if configuration_item['resourceType'] != 'AWS::EC2::Instance':
                  return 'NOT_APPLICABLE'
              
              # Get the instance type
              instance_type = configuration_item['configuration'].get('instanceType')
              
              # Get the approved instance types from rule parameters
              approved_types = rule_parameters.get('approvedInstanceTypes', 't2.micro,t3.micro,t3.small').split(',')
              
              # Check if the instance type is in the approved list
              if instance_type not in approved_types:
                  return 'NON_COMPLIANT'
              
              return 'COMPLIANT'

          def lambda_handler(event, context):
              """
              Lambda function handler for AWS Config custom rule
              """
              invoking_event = json.loads(event['invokingEvent'])
              rule_parameters = json.loads(event['ruleParameters']) if 'ruleParameters' in event else {}
              
              if 'configurationItem' not in invoking_event:
                  return {
                      'compliance_type': 'NOT_APPLICABLE',
                      'annotation': 'The event did not contain a configuration item.'
                  }
              
              configuration_item = invoking_event['configurationItem']
              
              # Check if the resource was deleted
              if configuration_item['configurationItemStatus'] == 'ResourceDeleted':
                  return {
                      'compliance_type': 'NOT_APPLICABLE',
                      'annotation': 'The resource was deleted.'
                  }
              
              # Evaluate compliance
              compliance_type = evaluate_compliance(configuration_item, rule_parameters)
              
              # Get the approved instance types for the annotation
              approved_types = rule_parameters.get('approvedInstanceTypes', 't2.micro,t3.micro,t3.small').split(',')
              
              # Build the evaluation response
              instance_type = configuration_item['configuration'].get('instanceType')
              annotation = f"EC2 instance type {instance_type} is approved" if compliance_type == 'COMPLIANT' else f"EC2 instance type {instance_type} is not in the approved list: {', '.join(approved_types)}"
              
              evaluation = {
                  'compliance_type': compliance_type,
                  'annotation': annotation,
                  'ordering_timestamp': configuration_item['configurationItemCaptureTime']
              }
              
              put_evaluations_request = {
                  'Evaluations': [
                      {
                          'ComplianceResourceType': configuration_item['resourceType'],
                          'ComplianceResourceId': configuration_item['resourceId'],
                          'ComplianceType': compliance_type,
                          'Annotation': annotation,
                          'OrderingTimestamp': datetime.datetime.now().isoformat()
                      }
                  ],
                  'ResultToken': event['resultToken']
              }
              
              # Submit the evaluation results to AWS Config
              config = boto3.client('config')
              config.put_evaluations(**put_evaluations_request)
              
              return evaluation

  # IAM User MFA Config Rule
  IAMUserMFAConfigRule:
    Type: AWS::Config::ConfigRule
    DependsOn: IAMUserMFAFunction
    Properties:
      ConfigRuleName: iam-user-mfa-enabled
      Description: Checks if IAM users have MFA enabled
      Source:
        Owner: CUSTOM_LAMBDA
        SourceIdentifier: !GetAtt IAMUserMFAFunction.Arn
        SourceDetails:
          - EventSource: aws.config
            MessageType: ConfigurationItemChangeNotification
          - EventSource: aws.config
            MessageType: OversizedConfigurationItemChangeNotification
      Scope:
        ComplianceResourceTypes:
          - AWS::IAM::User
      MaximumExecutionFrequency: TwentyFour_Hours

  # S3 Public Access Config Rule
  S3PublicAccessConfigRule:
    Type: AWS::Config::ConfigRule
    DependsOn: S3PublicAccessFunction
    Properties:
      ConfigRuleName: s3-public-access-blocked
      Description: Checks if S3 buckets have public access blocked
      Source:
        Owner: CUSTOM_LAMBDA
        SourceIdentifier: !GetAtt S3PublicAccessFunction.Arn
        SourceDetails:
          - EventSource: aws.config
            MessageType: ConfigurationItemChangeNotification
          - EventSource: aws.config
            MessageType: OversizedConfigurationItemChangeNotification
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      MaximumExecutionFrequency: TwentyFour_Hours

  # EC2 Instance Types Config Rule
  EC2InstanceTypesConfigRule:
    Type: AWS::Config::ConfigRule
    DependsOn: EC2InstanceTypesFunction
    Properties:
      ConfigRuleName: ec2-approved-instance-types
      Description: Checks if EC2 instances are using approved instance types
      Source:
        Owner: CUSTOM_LAMBDA
        SourceIdentifier: !GetAtt EC2InstanceTypesFunction.Arn
        SourceDetails:
          - EventSource: aws.config
            MessageType: ConfigurationItemChangeNotification
          - EventSource: aws.config
            MessageType: OversizedConfigurationItemChangeNotification
      InputParameters:
        approvedInstanceTypes: !Ref ApprovedInstanceTypes
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
      MaximumExecutionFrequency: TwentyFour_Hours

  # Lambda Permission for IAM User MFA Function
  IAMUserMFAFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt IAMUserMFAFunction.Arn
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  # Lambda Permission for S3 Public Access Function
  S3PublicAccessFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt S3PublicAccessFunction.Arn
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  # Lambda Permission for EC2 Instance Types Function
  EC2InstanceTypesFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt EC2InstanceTypesFunction.Arn
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

Outputs:
  IAMUserMFAConfigRuleArn:
    Description: ARN of the IAM User MFA Config Rule
    Value: !GetAtt IAMUserMFAConfigRule.Arn
  
  S3PublicAccessConfigRuleArn:
    Description: ARN of the S3 Public Access Config Rule
    Value: !GetAtt S3PublicAccessConfigRule.Arn
  
  EC2InstanceTypesConfigRuleArn:
    Description: ARN of the EC2 Instance Types Config Rule
    Value: !GetAtt EC2InstanceTypesConfigRule.Arn