AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Config Automated Remediation Workflows'

Parameters:
  SNSTopicARN:
    Type: String
    Description: SNS Topic ARN for Config notifications

Resources:
  # IAM Role for Remediation Actions
  ConfigRemediationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ConfigRemediationRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole
      Policies:
        - PolicyName: ConfigRemediationPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutBucketEncryption
                  - s3:PutBucketPublicAccessBlock
                  - s3:PutBucketPolicy
                  - s3:GetBucketEncryption
                  - s3:GetBucketPublicAccessBlock
                  - s3:GetBucketPolicy
                  - ec2:CreateSnapshot
                  - ec2:DeleteSnapshot
                  - ec2:DescribeSnapshots
                  - ec2:DescribeVolumes
                  - ec2:ModifyInstanceAttribute
                  - ec2:StopInstances
                  - ec2:StartInstances
                  - ec2:DescribeInstances
                  - ec2:CreateVolume
                  - ec2:DeleteVolume
                  - ec2:AttachVolume
                  - ec2:DetachVolume
                  - ec2:ModifyVolume
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                Resource: '*'

  # S3 Bucket Encryption Remediation
  S3BucketEncryptionRemediation:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Name: ConfigRemediation-EnableS3BucketEncryption
      Content:
        schemaVersion: '0.3'
        description: 'Enables default encryption for an S3 bucket'
        assumeRole: !GetAtt ConfigRemediationRole.Arn
        parameters:
          BucketName:
            type: String
            description: '(Required) The name of the S3 bucket'
          SSEAlgorithm:
            type: String
            description: 'The server-side encryption algorithm to use'
            default: AES256
            allowedValues:
              - AES256
              - aws:kms
          KMSMasterKeyID:
            type: String
            description: 'The KMS master key ID to use (if SSEAlgorithm is aws:kms)'
            default: ''
        mainSteps:
          - name: EnableBucketEncryption
            action: aws:executeAwsApi
            inputs:
              Service: s3
              Api: PutBucketEncryption
              Bucket: '{{BucketName}}'
              ServerSideEncryptionConfiguration:
                Rules:
                  - ApplyServerSideEncryptionByDefault:
                      SSEAlgorithm: '{{SSEAlgorithm}}'
                      KMSMasterKeyID: '{{KMSMasterKeyID}}'
            isEnd: true

  # S3 Public Access Block Remediation
  S3PublicAccessBlockRemediation:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Name: ConfigRemediation-BlockS3PublicAccess
      Content:
        schemaVersion: '0.3'
        description: 'Blocks public access for an S3 bucket'
        assumeRole: !GetAtt ConfigRemediationRole.Arn
        parameters:
          BucketName:
            type: String
            description: '(Required) The name of the S3 bucket'
        mainSteps:
          - name: BlockPublicAccess
            action: aws:executeAwsApi
            inputs:
              Service: s3
              Api: PutPublicAccessBlock
              Bucket: '{{BucketName}}'
              PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                IgnorePublicAcls: true
                BlockPublicPolicy: true
                RestrictPublicBuckets: true
            isEnd: true

  # EBS Volume Encryption Remediation
  EBSVolumeEncryptionRemediation:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Name: ConfigRemediation-EncryptEBSVolume
      Content:
        schemaVersion: '0.3'
        description: 'Creates an encrypted copy of an EBS volume and replaces the original'
        assumeRole: !GetAtt ConfigRemediationRole.Arn
        parameters:
          VolumeId:
            type: String
            description: '(Required) The ID of the EBS volume to encrypt'
          KmsKeyId:
            type: String
            description: 'The KMS key ID to use for encryption'
            default: alias/aws/ebs
        mainSteps:
          - name: GetVolumeInfo
            action: aws:executeAwsApi
            inputs:
              Service: ec2
              Api: DescribeVolumes
              VolumeIds:
                - '{{VolumeId}}'
            outputs:
              - Name: AvailabilityZone
                Selector: $.Volumes[0].AvailabilityZone
                Type: String
              - Name: Size
                Selector: $.Volumes[0].Size
                Type: Integer
              - Name: VolumeType
                Selector: $.Volumes[0].VolumeType
                Type: String
              - Name: Iops
                Selector: $.Volumes[0].Iops
                Type: Integer
              - Name: Throughput
                Selector: $.Volumes[0].Throughput
                Type: Integer
              - Name: AttachedInstanceId
                Selector: $.Volumes[0].Attachments[0].InstanceId
                Type: String
              - Name: Device
                Selector: $.Volumes[0].Attachments[0].Device
                Type: String
              - Name: State
                Selector: $.Volumes[0].State
                Type: String
          
          - name: CreateSnapshot
            action: aws:executeAwsApi
            inputs:
              Service: ec2
              Api: CreateSnapshot
              VolumeId: '{{VolumeId}}'
              Description: 'Snapshot for encryption remediation of {{VolumeId}}'
            outputs:
              - Name: SnapshotId
                Selector: $.SnapshotId
                Type: String
          
          - name: WaitForSnapshotCompletion
            action: aws:waitForAwsResourceProperty
            inputs:
              Service: ec2
              Api: DescribeSnapshots
              SnapshotIds:
                - '{{CreateSnapshot.SnapshotId}}'
              PropertySelector: $.Snapshots[0].State
              DesiredValues:
                - completed
            timeoutSeconds: 1200
          
          - name: CreateEncryptedVolume
            action: aws:executeAwsApi
            inputs:
              Service: ec2
              Api: CreateVolume
              AvailabilityZone: '{{GetVolumeInfo.AvailabilityZone}}'
              SnapshotId: '{{CreateSnapshot.SnapshotId}}'
              VolumeType: '{{GetVolumeInfo.VolumeType}}'
              Size: '{{GetVolumeInfo.Size}}'
              Iops: '{{GetVolumeInfo.Iops}}'
              Throughput: '{{GetVolumeInfo.Throughput}}'
              Encrypted: true
              KmsKeyId: '{{KmsKeyId}}'
            outputs:
              - Name: VolumeId
                Selector: $.VolumeId
                Type: String
          
          - name: WaitForVolumeAvailable
            action: aws:waitForAwsResourceProperty
            inputs:
              Service: ec2
              Api: DescribeVolumes
              VolumeIds:
                - '{{CreateEncryptedVolume.VolumeId}}'
              PropertySelector: $.Volumes[0].State
              DesiredValues:
                - available
            timeoutSeconds: 300
          
          - name: DetachOriginalVolume
            action: aws:executeAwsApi
            inputs:
              Service: ec2
              Api: DetachVolume
              VolumeId: '{{VolumeId}}'
              Force: true
            onFailure: Continue
          
          - name: WaitForVolumeDetached
            action: aws:waitForAwsResourceProperty
            inputs:
              Service: ec2
              Api: DescribeVolumes
              VolumeIds:
                - '{{VolumeId}}'
              PropertySelector: $.Volumes[0].State
              DesiredValues:
                - available
            timeoutSeconds: 300
            onFailure: Continue
          
          - name: AttachEncryptedVolume
            action: aws:executeAwsApi
            inputs:
              Service: ec2
              Api: AttachVolume
              VolumeId: '{{CreateEncryptedVolume.VolumeId}}'
              InstanceId: '{{GetVolumeInfo.AttachedInstanceId}}'
              Device: '{{GetVolumeInfo.Device}}'
            onFailure: Continue
          
          - name: DeleteSnapshot
            action: aws:executeAwsApi
            inputs:
              Service: ec2
              Api: DeleteSnapshot
              SnapshotId: '{{CreateSnapshot.SnapshotId}}'
            isEnd: true

  # Config Remediation Configuration for S3 Bucket Encryption
  S3BucketEncryptionRemediationConfig:
    Type: AWS::Config::RemediationConfiguration
    Properties:
      ConfigRuleName: s3-bucket-server-side-encryption-enabled
      TargetId: !Ref S3BucketEncryptionRemediation
      TargetType: SSM_DOCUMENT
      TargetVersion: "1"
      Parameters:
        BucketName:
          ResourceValue:
            Value: RESOURCE_ID
        SSEAlgorithm:
          StaticValue:
            Values:
              - AES256
      Automatic: true
      MaximumAutomaticAttempts: 5
      RetryAttemptSeconds: 60

  # Config Remediation Configuration for S3 Public Access Block
  S3PublicAccessBlockRemediationConfig:
    Type: AWS::Config::RemediationConfiguration
    Properties:
      ConfigRuleName: s3-public-access-blocked
      TargetId: !Ref S3PublicAccessBlockRemediation
      TargetType: SSM_DOCUMENT
      TargetVersion: "1"
      Parameters:
        BucketName:
          ResourceValue:
            Value: RESOURCE_ID
      Automatic: true
      MaximumAutomaticAttempts: 5
      RetryAttemptSeconds: 60

  # Config Remediation Configuration for EBS Volume Encryption
  EBSVolumeEncryptionRemediationConfig:
    Type: AWS::Config::RemediationConfiguration
    Properties:
      ConfigRuleName: encrypted-volumes
      TargetId: !Ref EBSVolumeEncryptionRemediation
      TargetType: SSM_DOCUMENT
      TargetVersion: "1"
      Parameters:
        VolumeId:
          ResourceValue:
            Value: RESOURCE_ID
        KmsKeyId:
          StaticValue:
            Values:
              - alias/aws/ebs
      Automatic: false
      MaximumAutomaticAttempts: 5
      RetryAttemptSeconds: 60

Outputs:
  ConfigRemediationRoleArn:
    Description: ARN of the Config Remediation Role
    Value: !GetAtt ConfigRemediationRole.Arn
  
  S3BucketEncryptionRemediationArn:
    Description: ARN of the S3 Bucket Encryption Remediation Document
    Value: !Ref S3BucketEncryptionRemediation
  
  S3PublicAccessBlockRemediationArn:
    Description: ARN of the S3 Public Access Block Remediation Document
    Value: !Ref S3PublicAccessBlockRemediation
  
  EBSVolumeEncryptionRemediationArn:
    Description: ARN of the EBS Volume Encryption Remediation Document
    Value: !Ref EBSVolumeEncryptionRemediation