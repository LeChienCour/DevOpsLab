version: 0.2

# Parallel Build Environment Specification
# This buildspec demonstrates parallel execution of multiple build tasks

env:
  variables:
    PARALLEL_JOBS: 4
    BUILD_ENV: production
  parameter-store:
    # Example: Retrieve configuration from Parameter Store
    # API_ENDPOINT: /myapp/api-endpoint

phases:
  install:
    runtime-versions:
      nodejs: 18
      python: 3.9
    commands:
      - echo "Setting up parallel build environment..."
      - echo "Available CPU cores: $(nproc)"
      - echo "Parallel jobs configured: $PARALLEL_JOBS"
      
      # Install parallel execution tools
      - apt-get update && apt-get install -y parallel
      
      # Install language-specific tools
      - npm install -g yarn typescript eslint jest
      - pip install pytest flake8 black mypy

  pre_build:
    commands:
      - echo "Running pre-build tasks in parallel..."
      - echo "Build started on $(date)"
      
      # Create parallel task scripts
      - mkdir -p parallel-tasks
      
      # Frontend linting task
      - |
        cat > parallel-tasks/frontend-lint.sh << 'EOF'
        #!/bin/bash
        echo "Running frontend linting..."
        if [ -d "frontend" ]; then
          cd frontend
          npm ci
          npx eslint src/ --ext .js,.ts,.jsx,.tsx
          echo "Frontend linting completed"
        else
          echo "No frontend directory found, skipping"
        fi
        EOF
      
      # Backend linting task
      - |
        cat > parallel-tasks/backend-lint.sh << 'EOF'
        #!/bin/bash
        echo "Running backend linting..."
        if [ -d "backend" ]; then
          cd backend
          pip install -r requirements.txt
          flake8 .
          black --check .
          mypy .
          echo "Backend linting completed"
        else
          echo "No backend directory found, skipping"
        fi
        EOF
      
      # Security scan task
      - |
        cat > parallel-tasks/security-scan.sh << 'EOF'
        #!/bin/bash
        echo "Running security scans..."
        
        # Frontend security scan
        if [ -d "frontend" ]; then
          cd frontend
          npm audit --audit-level moderate || true
          cd ..
        fi
        
        # Backend security scan
        if [ -d "backend" ]; then
          cd backend
          pip install safety
          safety check || true
          cd ..
        fi
        
        echo "Security scans completed"
        EOF
      
      # Documentation generation task
      - |
        cat > parallel-tasks/docs-generation.sh << 'EOF'
        #!/bin/bash
        echo "Generating documentation..."
        
        # Generate API documentation
        if [ -f "openapi.yaml" ]; then
          echo "Generating API documentation from OpenAPI spec..."
          # Install swagger-codegen or similar tool
          echo "API documentation generated"
        fi
        
        # Generate code documentation
        if [ -d "frontend" ]; then
          cd frontend
          npx typedoc src/ --out ../docs/frontend || true
          cd ..
        fi
        
        if [ -d "backend" ]; then
          cd backend
          pip install sphinx
          sphinx-build -b html docs/ ../docs/backend || true
          cd ..
        fi
        
        echo "Documentation generation completed"
        EOF
      
      # Make scripts executable
      - chmod +x parallel-tasks/*.sh

  build:
    commands:
      - echo "Starting parallel build phase..."
      
      # Execute parallel tasks
      - echo "Executing linting and security tasks in parallel..."
      - |
        parallel --jobs $PARALLEL_JOBS --joblog parallel-build.log ::: \
          "bash parallel-tasks/frontend-lint.sh" \
          "bash parallel-tasks/backend-lint.sh" \
          "bash parallel-tasks/security-scan.sh" \
          "bash parallel-tasks/docs-generation.sh"
      
      # Check parallel execution results
      - echo "Parallel task execution log:"
      - cat parallel-build.log
      
      # Run tests in parallel
      - echo "Running tests in parallel..."
      - mkdir -p test-results
      
      # Frontend tests
      - |
        if [ -d "frontend" ]; then
          echo "Running frontend tests..."
          cd frontend
          npm test -- --coverage --watchAll=false --outputFile=../test-results/frontend-results.json || true
          cd ..
        fi &
      
      # Backend tests
      - |
        if [ -d "backend" ]; then
          echo "Running backend tests..."
          cd backend
          pytest --junitxml=../test-results/backend-results.xml --cov=. --cov-report=xml:../test-results/backend-coverage.xml || true
          cd ..
        fi &
      
      # Wait for all background jobs to complete
      - wait
      
      # Build applications in parallel
      - echo "Building applications in parallel..."
      
      # Frontend build
      - |
        if [ -d "frontend" ]; then
          echo "Building frontend..."
          cd frontend
          npm run build
          cd ..
        fi &
      
      # Backend build
      - |
        if [ -d "backend" ]; then
          echo "Building backend..."
          cd backend
          python setup.py sdist bdist_wheel || true
          cd ..
        fi &
      
      # Wait for builds to complete
      - wait
      
      # Generate consolidated build metadata
      - echo "Generating build metadata..."
      - |
        cat > build-info.json << EOF
        {
          "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "commitHash": "$CODEBUILD_RESOLVED_SOURCE_VERSION",
          "buildId": "$CODEBUILD_BUILD_ID",
          "parallelJobs": $PARALLEL_JOBS,
          "availableCores": $(nproc),
          "buildComponents": {
            "frontend": $([ -d "frontend" ] && echo "true" || echo "false"),
            "backend": $([ -d "backend" ] && echo "true" || echo "false"),
            "documentation": true
          }
        }
        EOF

  post_build:
    commands:
      - echo "Post-build phase started..."
      
      # Consolidate artifacts
      - echo "Consolidating build artifacts..."
      - mkdir -p dist
      
      # Copy frontend artifacts
      - |
        if [ -d "frontend/build" ]; then
          cp -r frontend/build dist/frontend
        elif [ -d "frontend/dist" ]; then
          cp -r frontend/dist dist/frontend
        fi
      
      # Copy backend artifacts
      - |
        if [ -d "backend/dist" ]; then
          cp -r backend/dist dist/backend
        fi
      
      # Copy documentation
      - |
        if [ -d "docs" ]; then
          cp -r docs dist/
        fi
      
      # Generate deployment manifest
      - echo "Generating deployment manifest..."
      - |
        cat > deployment-manifest.json << EOF
        {
          "version": "1.0",
          "buildId": "$CODEBUILD_BUILD_ID",
          "components": {
            "frontend": {
              "path": "dist/frontend",
              "type": "static-web"
            },
            "backend": {
              "path": "dist/backend",
              "type": "python-package"
            },
            "documentation": {
              "path": "dist/docs",
              "type": "static-docs"
            }
          }
        }
        EOF
      
      # Performance metrics
      - echo "Build performance metrics:"
      - echo "Total build time: $(($(date +%s) - $CODEBUILD_START_TIME)) seconds"
      - echo "Parallel execution log summary:"
      - awk '{print $4, $9}' parallel-build.log | column -t
      
      - echo "Build completed on $(date)"

# Cache configuration for faster builds
cache:
  paths:
    - 'frontend/node_modules/**/*'
    - 'backend/.venv/**/*'
    - '/tmp/.npm/**/*'
    - '/tmp/.pip-cache/**/*'

artifacts:
  files:
    - 'dist/**/*'
    - 'deployment-manifest.json'
  secondary-artifacts:
    test-results:
      files:
        - 'test-results/**/*'
      base-directory: '.'
    build-logs:
      files:
        - 'parallel-build.log'
        - 'build-info.json'
      base-directory: '.'
    documentation:
      files:
        - 'docs/**/*'
      base-directory: '.'

reports:
  frontend-tests:
    files:
      - 'test-results/frontend-results.json'
    file-format: 'JUNITXML'
    base-directory: '.'
  backend-tests:
    files:
      - 'test-results/backend-results.xml'
    file-format: 'JUNITXML'
    base-directory: '.'
  coverage-reports:
    files:
      - 'test-results/backend-coverage.xml'
    file-format: 'COBERTURAXML'
    base-directory: '.'