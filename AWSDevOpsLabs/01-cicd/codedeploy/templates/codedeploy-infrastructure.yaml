AWSTemplateFormatVersion: '2010-09-09'
Description: 'CodeDeploy basic infrastructure with EC2 instances for in-place deployment'

Parameters:
  ProjectName:
    Type: String
    Default: 'codedeploy-lab'
    Description: 'Name of the project for resource naming'
  
  ArtifactBucketName:
    Type: String
    Description: 'S3 bucket name for deployment artifacts (must be globally unique)'

Resources:
  # S3 Bucket for Deployment Artifacts
  ArtifactStore:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ArtifactBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: 'Deployment Artifacts'

  # IAM Role for CodeDeploy Service
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-codedeploy-service-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # IAM Role for EC2 Instances
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-ec2-instance-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: S3ArtifactAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${ArtifactStore.Arn}/*'
                  - !GetAtt ArtifactStore.Arn
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # Instance Profile for EC2 Instances
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  # Security Group for EC2 Instances
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-ec2-sg'
      GroupDescription: 'Security group for CodeDeploy lab EC2 instances'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: 'HTTP access'
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: 'SSH access'
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # EC2 Instance 1
  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2 AMI (us-east-1)
      InstanceType: t3.micro
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          
          # Install CodeDeploy agent
          yum install -y ruby wget
          cd /home/ec2-user
          wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          service codedeploy-agent start
          
          # Create initial web content
          cat > /var/www/html/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>CodeDeploy Lab - Initial Version</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; background-color: #f0f0f0; }
                  .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 10px; }
                  .status { background: #e7f3ff; padding: 20px; border-radius: 5px; margin: 20px 0; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>ðŸš€ CodeDeploy Lab Application</h1>
                  <div class="status">
                      <h2>Initial Deployment</h2>
                      <p>This is the initial version deployed during infrastructure setup.</p>
                      <p><strong>Instance:</strong> Instance 1</p>
                      <p><strong>Version:</strong> 1.0.0</p>
                  </div>
              </div>
          </body>
          </html>
          EOF
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-instance-1'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: Lab

  # EC2 Instance 2
  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2 AMI (us-east-1)
      InstanceType: t3.micro
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          
          # Install CodeDeploy agent
          yum install -y ruby wget
          cd /home/ec2-user
          wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          service codedeploy-agent start
          
          # Create initial web content
          cat > /var/www/html/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>CodeDeploy Lab - Initial Version</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; background-color: #f0f0f0; }
                  .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 10px; }
                  .status { background: #e7f3ff; padding: 20px; border-radius: 5px; margin: 20px 0; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>ðŸš€ CodeDeploy Lab Application</h1>
                  <div class="status">
                      <h2>Initial Deployment</h2>
                      <p>This is the initial version deployed during infrastructure setup.</p>
                      <p><strong>Instance:</strong> Instance 2</p>
                      <p><strong>Version:</strong> 1.0.0</p>
                  </div>
              </div>
          </body>
          </html>
          EOF
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-instance-2'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: Lab

  # CodeDeploy Application
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub '${ProjectName}-app'
      ComputePlatform: Server
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # CodeDeploy Deployment Group
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub '${ProjectName}-deployment-group'
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      Ec2TagFilters:
        - Type: KEY_AND_VALUE
          Key: Project
          Value: !Ref ProjectName
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
          - DEPLOYMENT_STOP_ON_ALARM

Outputs:
  EC2Application:
    Description: 'CodeDeploy application name'
    Value: !Ref CodeDeployApplication
    Export:
      Name: !Sub '${AWS::StackName}-EC2Application'
  
  DeploymentGroup:
    Description: 'CodeDeploy deployment group name'
    Value: !Ref CodeDeployDeploymentGroup
    Export:
      Name: !Sub '${AWS::StackName}-DeploymentGroup'
  
  ArtifactBucket:
    Description: 'S3 bucket for deployment artifacts'
    Value: !Ref ArtifactStore
    Export:
      Name: !Sub '${AWS::StackName}-ArtifactBucket'
  
  Instance1IP:
    Description: 'Public IP of EC2 Instance 1'
    Value: !GetAtt EC2Instance1.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-Instance1IP'
  
  Instance2IP:
    Description: 'Public IP of EC2 Instance 2'
    Value: !GetAtt EC2Instance2.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-Instance2IP'